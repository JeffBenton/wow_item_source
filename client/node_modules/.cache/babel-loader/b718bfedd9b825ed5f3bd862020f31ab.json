{"ast":null,"code":"import $ from 'jquery';\nexport const fetchAzerite = params => {\n  return dispatch => {\n    let url = '/api/azerite/search?' + $.param({\n      class: params.class,\n      sources: params.sources,\n      slots: params.slots\n    });\n    fetch(url).then(res => res.json()).then(responseJSON => {\n      dispatch({\n        type: 'ADD_AZERITE',\n        cards: responseJSON\n      });\n    });\n  };\n};\nexport const fetchTrinkets = params => {\n  return dispatch => {\n    let url = '/api/trinkets/search?' + $.param({\n      role: params.role,\n      sources: params.sources\n    });\n    fetch(url).then(res => res.json()).then(responseJSON => {\n      dispatch({\n        type: 'ADD_TRINKETS',\n        cards: responseJSON\n      });\n    });\n  };\n};\nexport const fetchWeapons = params => {\n  return dispatch => {\n    let url = '/api/weapons/search?' + $.param({\n      role: params.role,\n      sources: params.sources\n    });\n    fetch(url).then(res => res.json()).then(responseJSON => {\n      dispatch({\n        type: 'ADD_WEAPONS',\n        cards: responseJSON\n      });\n    });\n  };\n};\nexport const displayPiece = (id, category, type) => {\n  return dispatch => {\n    dispatch({\n      type: \"LOADING_\".concat(category.toUpperCase())\n    });\n    const data = {\n      id\n    };\n    fetch(\"/api/\".concat(category, \"/update\"), {\n      method: 'post',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify(data)\n    }).then(res => res.json()).then(responseJSON => {\n      dispatch({\n        type,\n        piece: responseJSON\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/jeffreybenton/Documents/Coding Things/react/wow_item_source/client/src/actions/itemActions.js"],"names":["$","fetchAzerite","params","dispatch","url","param","class","sources","slots","fetch","then","res","json","responseJSON","type","cards","fetchTrinkets","role","fetchWeapons","displayPiece","id","category","toUpperCase","data","method","headers","Accept","body","JSON","stringify","piece"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd;AAEA,OAAO,MAAMC,YAAY,GAAGC,MAAM,IAAI;AAClC,SAAQC,QAAD,IAAc;AACjB,QAAIC,GAAG,GAAG,yBAAyBJ,CAAC,CAACK,KAAF,CAAQ;AAAEC,MAAAA,KAAK,EAAEJ,MAAM,CAACI,KAAhB;AAAuBC,MAAAA,OAAO,EAAEL,MAAM,CAACK,OAAvC;AAAgDC,MAAAA,KAAK,EAAEN,MAAM,CAACM;AAA9D,KAAR,CAAnC;AACAC,IAAAA,KAAK,CAACL,GAAD,CAAL,CACKM,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEUG,YAAY,IAAI;AAAEV,MAAAA,QAAQ,CAAC;AAAEW,QAAAA,IAAI,EAAE,aAAR;AAAuBC,QAAAA,KAAK,EAAEF;AAA9B,OAAD,CAAR;AACvB,KAHL;AAIH,GAND;AAOH,CARM;AAUP,OAAO,MAAMG,aAAa,GAAGd,MAAM,IAAI;AACnC,SAAOC,QAAQ,IAAI;AACf,QAAIC,GAAG,GAAG,0BAA0BJ,CAAC,CAACK,KAAF,CAAQ;AAAEY,MAAAA,IAAI,EAAEf,MAAM,CAACe,IAAf;AAAqBV,MAAAA,OAAO,EAAEL,MAAM,CAACK;AAArC,KAAR,CAApC;AACAE,IAAAA,KAAK,CAACL,GAAD,CAAL,CACKM,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEUG,YAAY,IAAI;AAAEV,MAAAA,QAAQ,CAAC;AAAEW,QAAAA,IAAI,EAAE,cAAR;AAAwBC,QAAAA,KAAK,EAAEF;AAA/B,OAAD,CAAR;AACvB,KAHL;AAIH,GAND;AAOH,CARM;AAUP,OAAO,MAAMK,YAAY,GAAGhB,MAAM,IAAI;AAClC,SAAOC,QAAQ,IAAI;AACf,QAAIC,GAAG,GAAG,yBAAyBJ,CAAC,CAACK,KAAF,CAAQ;AAAEY,MAAAA,IAAI,EAAEf,MAAM,CAACe,IAAf;AAAqBV,MAAAA,OAAO,EAAEL,MAAM,CAACK;AAArC,KAAR,CAAnC;AACAE,IAAAA,KAAK,CAACL,GAAD,CAAL,CACKM,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEUG,YAAY,IAAI;AAAEV,MAAAA,QAAQ,CAAC;AAAEW,QAAAA,IAAI,EAAE,aAAR;AAAuBC,QAAAA,KAAK,EAAEF;AAA9B,OAAD,CAAR;AACvB,KAHL;AAIH,GAND;AAOH,CARM;AAUP,OAAO,MAAMM,YAAY,GAAG,CAACC,EAAD,EAAKC,QAAL,EAAeP,IAAf,KAAwB;AAChD,SAAOX,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAAC;AAAEW,MAAAA,IAAI,oBAAaO,QAAQ,CAACC,WAAT,EAAb;AAAN,KAAD,CAAR;AACA,UAAMC,IAAI,GAAG;AAAEH,MAAAA;AAAF,KAAb;AACAX,IAAAA,KAAK,gBAASY,QAAT,cAA4B;AAC7BG,MAAAA,MAAM,EAAE,MADqB;AAE7BC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAELC,QAAAA,MAAM,EAAE;AAFH,OAFoB;AAM7BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AANuB,KAA5B,CAAL,CAQKb,IARL,CAQUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EARjB,EASKF,IATL,CASUG,YAAY,IAAI;AAAEV,MAAAA,QAAQ,CAAC;AAAEW,QAAAA,IAAF;AAASgB,QAAAA,KAAK,EAAEjB;AAAhB,OAAD,CAAR;AACvB,KAVL;AAWH,GAdD;AAeH,CAhBM","sourcesContent":["import $ from 'jquery';\n\nexport const fetchAzerite = params => {\n    return (dispatch) => {\n        let url = '/api/azerite/search?' + $.param({ class: params.class, sources: params.sources, slots: params.slots });\n        fetch(url)\n            .then(res => res.json())\n            .then(responseJSON => { dispatch({ type: 'ADD_AZERITE', cards: responseJSON})\n            })\n    }\n};\n\nexport const fetchTrinkets = params => {\n    return dispatch => {\n        let url = '/api/trinkets/search?' + $.param({ role: params.role, sources: params.sources });\n        fetch(url)\n            .then(res => res.json())\n            .then(responseJSON => { dispatch({ type: 'ADD_TRINKETS', cards: responseJSON})\n            })\n    }\n};\n\nexport const fetchWeapons = params => {\n    return dispatch => {\n        let url = '/api/weapons/search?' + $.param({ role: params.role, sources: params.sources });\n        fetch(url)\n            .then(res => res.json())\n            .then(responseJSON => { dispatch({ type: 'ADD_WEAPONS', cards: responseJSON})\n            })\n    }\n};\n\nexport const displayPiece = (id, category, type) => {\n    return dispatch => {\n        dispatch({ type: `LOADING_${category.toUpperCase()}`});\n        const data = { id };\n        fetch(`/api/${category}/update`, {\n            method: 'post',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            },\n            body: JSON.stringify(data)\n        })\n            .then(res => res.json())\n            .then(responseJSON => { dispatch({ type , piece: responseJSON})\n            })\n    }\n};"]},"metadata":{},"sourceType":"module"}