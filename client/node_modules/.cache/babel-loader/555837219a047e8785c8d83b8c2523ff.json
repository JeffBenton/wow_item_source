{"ast":null,"code":"var _jsxFileName = \"/Users/jeffreybenton/Documents/Coding Things/react/wow_item_source/client/src/components/Azerite/FilterAzerite.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchCards, fetchAzerite } from \"../../actions/itemActions\";\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\n\nclass FilterAzerite extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleClassSelection = e => {\n      this.props.setClass(e.target.title);\n      const params = this.buildArray();\n      this.props.fetchAzerite({\n        class: e.target.title,\n        sources: params.sources,\n        slots: params.slots\n      });\n    };\n\n    this.handleSourceSelection = e => {\n      const value = this.props.sources[e.target.id];\n      this.props.setSource(e.target.id, value);\n      console.log(this.buildArray());\n    };\n\n    this.handleSlotSelection = e => {\n      const value = this.props.slots[e.target.id];\n      this.props.setSlot(e.target.id, value);\n    };\n\n    this.buildArray = () => {\n      const sources = Object.keys(this.props.sources).filter(source => this.props.sources[source]);\n      const slots = Object.keys(this.props.slots).filter(slot => this.props.slots[slot]);\n      return {\n        sources,\n        slots\n      };\n    };\n  }\n\n  render() {\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(DropdownButton, {\n      id: \"dropdown-class-button\",\n      title: this.props.char_class,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, ['Death Knight', 'Demon Hunter', 'Druid', 'Hunter', 'Mage', 'Monk', 'Paladin', 'Priest', 'Rogue', 'Shaman', 'Warlock', 'Warrior'].map(cls => React.createElement(\"div\", {\n      key: cls,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(Dropdown.Item, {\n      onClick: this.handleClassSelection,\n      title: cls,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, cls)))), React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, ['Raid', 'Dungeon', 'PvP'].map(source => React.createElement(\"div\", {\n      key: source,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(Form.Check, {\n      onChange: this.handleSourceSelection,\n      custom: true,\n      checked: this.props.sources[source],\n      label: source,\n      type: \"checkbox\",\n      id: source,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    })))), React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, ['Head', 'Shoulder', 'Chest'].map(slot => React.createElement(\"div\", {\n      key: slot,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Form.Check, {\n      onChange: this.handleSlotSelection,\n      custom: true,\n      checked: this.props.slots[slot],\n      label: slot,\n      type: \"checkbox\",\n      id: slot,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    char_class: state.char_class,\n    sources: state.sources,\n    slots: state.slots\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchCards: path => dispatch(fetchCards(path)),\n    fetchAzerite: params => dispatch(fetchAzerite(params)),\n    setClass: char_class => dispatch({\n      type: \"SET_CLASS\",\n      char_class\n    }),\n    setSource: (source, value) => dispatch({\n      type: \"SET_SOURCE\",\n      source,\n      value\n    }),\n    setSlot: (slot, value) => dispatch({\n      type: \"SET_SLOT\",\n      slot,\n      value\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterAzerite);","map":{"version":3,"sources":["/Users/jeffreybenton/Documents/Coding Things/react/wow_item_source/client/src/components/Azerite/FilterAzerite.js"],"names":["React","Component","connect","fetchCards","fetchAzerite","Dropdown","DropdownButton","Form","Container","Row","FilterAzerite","handleClassSelection","e","props","setClass","target","title","params","buildArray","class","sources","slots","handleSourceSelection","value","id","setSource","console","log","handleSlotSelection","setSlot","Object","keys","filter","source","slot","render","char_class","map","cls","mapStateToProps","state","mapDispatchToProps","dispatch","path","type"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchCards, fetchAzerite } from \"../../actions/itemActions\";\n\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport DropdownButton from 'react-bootstrap/DropdownButton'\nimport Form from 'react-bootstrap/Form'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\n\n\nclass FilterAzerite extends Component {\n\n    handleClassSelection = e => {\n        this.props.setClass(e.target.title);\n        const params = this.buildArray();\n        this.props.fetchAzerite({ class: e.target.title, sources: params.sources, slots: params.slots })\n    };\n\n    handleSourceSelection = e => {\n        const value = this.props.sources[e.target.id];\n        this.props.setSource(e.target.id, value);\n        console.log(this.buildArray());\n    };\n\n    handleSlotSelection = e => {\n        const value = this.props.slots[e.target.id];\n        this.props.setSlot(e.target.id, value);\n    };\n\n    buildArray = () => {\n        const sources = Object.keys(this.props.sources).filter(source => this.props.sources[source]);\n        const slots = Object.keys(this.props.slots).filter(slot => this.props.slots[slot]);\n        return {\n            sources,\n            slots\n        }\n    };\n\n    render() {\n        return (\n            <Container>\n                <Row>\n                    <DropdownButton id=\"dropdown-class-button\" title={this.props.char_class}>\n                        {['Death Knight', 'Demon Hunter', 'Druid', 'Hunter', 'Mage', 'Monk', 'Paladin', 'Priest', 'Rogue', 'Shaman', 'Warlock', 'Warrior'].map(cls => (\n                            <div key={cls}>\n                                <Dropdown.Item onClick={this.handleClassSelection} title={cls}>{cls}</Dropdown.Item>\n                            </div>\n                        ))}\n                    </DropdownButton>\n\n                    <Form>\n                        {['Raid', 'Dungeon', 'PvP'].map(source => (\n                            <div key={source}>\n                                <Form.Check\n                                    onChange={this.handleSourceSelection}\n                                    custom\n                                    checked={this.props.sources[source]}\n                                    label={source}\n                                    type=\"checkbox\"\n                                    id={source}\n                                />\n                            </div>\n                        ))}\n                    </Form>\n                    <Form>\n                        {['Head', 'Shoulder', 'Chest'].map(slot => (\n                            <div key={slot}>\n                                <Form.Check\n                                    onChange={this.handleSlotSelection}\n                                    custom\n                                    checked={this.props.slots[slot]}\n                                    label={slot}\n                                    type=\"checkbox\"\n                                    id={slot}\n                                />\n                            </div>\n                        ))}\n                    </Form>\n                </Row>\n            </Container>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        char_class: state.char_class,\n        sources: state.sources,\n        slots: state.slots\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchCards: path => dispatch(fetchCards(path)),\n        fetchAzerite: params => dispatch(fetchAzerite(params)),\n        setClass: char_class => dispatch({ type: \"SET_CLASS\", char_class }),\n        setSource: (source, value) => dispatch({ type: \"SET_SOURCE\", source, value }),\n        setSlot: (slot, value) => dispatch({ type: \"SET_SLOT\", slot, value})\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterAzerite)\n"]},"metadata":{},"sourceType":"module"}