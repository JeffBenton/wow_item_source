{"ast":null,"code":"var _jsxFileName = \"/Users/jeffreybenton/Documents/Coding Things/react/wow_item_source/client/src/components/Azerite/FilterAzerite.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchCards, fetchAzerite } from \"../../actions/itemActions\";\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\n\nclass FilterAzerite extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      sources: [\"Raid\", \"Dungeon\", \"PvP\"],\n      slots: [\"Head\", \"Chest\", \"Shoulder\"]\n    };\n\n    this.handleClassSelection = e => {\n      this.props.setClass(e.target.title);\n      this.props.fetchAzerite({\n        class: e.target.title,\n        sources: this.state.sources,\n        slots: this.state.slots\n      });\n    };\n\n    this.handleSourceSelection = e => {\n      const source = e.target.id;\n      const x = {\n        source: this.props.sources[e.target.id]\n      };\n      console.log(source, x);\n      this.props.setSource(e.target.id);\n    };\n\n    this.handleSlotSelection = e => {};\n  }\n\n  render() {\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(DropdownButton, {\n      id: \"dropdown-class-button\",\n      title: this.props.char_class,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, ['Death Knight', 'Demon Hunter', 'Druid', 'Hunter', 'Mage', 'Monk', 'Paladin', 'Priest', 'Rogue', 'Shaman', 'Warlock', 'Warrior'].map(cls => React.createElement(\"div\", {\n      key: cls,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(Dropdown.Item, {\n      onClick: this.handleClassSelection,\n      title: cls,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, cls)))), React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, ['Raid', 'Dungeon', 'PvP'].map(source => React.createElement(\"div\", {\n      key: source,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Form.Check, {\n      onChange: this.handleSourceSelection,\n      custom: true,\n      checked: this.props.sources[source],\n      label: source,\n      type: \"checkbox\",\n      id: source,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    })))), React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, ['Head', 'Shoulder', 'Chest'].map(slot => React.createElement(\"div\", {\n      key: slot,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(Form.Check, {\n      onChange: this.handleSlotSelection,\n      custom: true,\n      checked: this.props.slots[slot],\n      label: slot,\n      type: \"checkbox\",\n      id: slot,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nFilterAzerite.defaultProps = {\n  char_class: \"Select a Class\",\n  sources: {\n    Raid: true,\n    Dungeon: true,\n    PvP: true\n  },\n  slots: {\n    Head: true,\n    Shoulder: true,\n    Chest: true\n  }\n};\n\nconst mapStateToProps = state => {\n  return {\n    char_class: state.char_class,\n    sources: {\n      Raid: true,\n      Dungeon: true,\n      PvP: true\n    },\n    slots: {\n      Head: true,\n      Shoulder: true,\n      Chest: true\n    }\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchCards: path => dispatch(fetchCards(path)),\n    fetchAzerite: params => dispatch(fetchAzerite(params)),\n    setClass: char_class => dispatch({\n      type: \"SET_CLASS\",\n      char_class\n    }),\n    setSource: source => dispatch({\n      type: \"SET_SOURCE\",\n      source\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterAzerite);","map":{"version":3,"sources":["/Users/jeffreybenton/Documents/Coding Things/react/wow_item_source/client/src/components/Azerite/FilterAzerite.js"],"names":["React","Component","connect","fetchCards","fetchAzerite","Dropdown","DropdownButton","Form","Container","Row","FilterAzerite","state","sources","slots","handleClassSelection","e","props","setClass","target","title","class","handleSourceSelection","source","id","x","console","log","setSource","handleSlotSelection","render","char_class","map","cls","slot","defaultProps","Raid","Dungeon","PvP","Head","Shoulder","Chest","mapStateToProps","mapDispatchToProps","dispatch","path","params","type"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchCards, fetchAzerite } from \"../../actions/itemActions\";\n\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport DropdownButton from 'react-bootstrap/DropdownButton'\nimport Form from 'react-bootstrap/Form'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\n\n\nclass FilterAzerite extends Component {\n\n    state = {\n        sources: [\"Raid\", \"Dungeon\", \"PvP\"],\n        slots: [\"Head\", \"Chest\", \"Shoulder\"]\n    };\n\n    handleClassSelection = e => {\n        this.props.setClass(e.target.title);\n        this.props.fetchAzerite({ class: e.target.title, sources: this.state.sources, slots: this.state.slots })\n    };\n\n    handleSourceSelection = e => {\n        const source = e.target.id;\n        const x = { source: this.props.sources[e.target.id] }\n        console.log(source, x)\n        this.props.setSource(e.target.id)\n    };\n\n    handleSlotSelection = e => {\n\n    };\n\n    render() {\n        return (\n            <Container>\n                <Row>\n                    <DropdownButton id=\"dropdown-class-button\" title={this.props.char_class}>\n                        {['Death Knight', 'Demon Hunter', 'Druid', 'Hunter', 'Mage', 'Monk', 'Paladin', 'Priest', 'Rogue', 'Shaman', 'Warlock', 'Warrior'].map(cls => (\n                            <div key={cls}>\n                                <Dropdown.Item onClick={this.handleClassSelection} title={cls}>{cls}</Dropdown.Item>\n                            </div>\n                        ))}\n                    </DropdownButton>\n\n                    <Form>\n                        {['Raid', 'Dungeon', 'PvP'].map(source => (\n                            <div key={source}>\n                                <Form.Check\n                                    onChange={this.handleSourceSelection}\n                                    custom\n                                    checked={this.props.sources[source]}\n                                    label={source}\n                                    type=\"checkbox\"\n                                    id={source}\n                                />\n                            </div>\n                        ))}\n                    </Form>\n                    <Form>\n                        {['Head', 'Shoulder', 'Chest'].map(slot => (\n                            <div key={slot}>\n                                <Form.Check\n                                    onChange={this.handleSlotSelection}\n                                    custom\n                                    checked={this.props.slots[slot]}\n                                    label={slot}\n                                    type=\"checkbox\"\n                                    id={slot}\n                                />\n                            </div>\n                        ))}\n                    </Form>\n                </Row>\n            </Container>\n        )\n    }\n}\n\nFilterAzerite.defaultProps = {\n    char_class: \"Select a Class\",\n    sources: {\n        Raid: true,\n        Dungeon: true,\n        PvP: true\n    },\n    slots: {\n        Head: true,\n        Shoulder: true,\n        Chest: true\n    }\n};\n\nconst mapStateToProps = state => {\n    return {\n        char_class: state.char_class,\n        sources: {\n            Raid: true,\n            Dungeon: true,\n            PvP: true\n        },\n        slots: {\n            Head: true,\n            Shoulder: true,\n            Chest: true\n        }\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchCards: path => dispatch(fetchCards(path)),\n        fetchAzerite: params => dispatch(fetchAzerite(params)),\n        setClass: char_class => dispatch({ type: \"SET_CLASS\", char_class }),\n        setSource: source => dispatch({ type: \"SET_SOURCE\", source })\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterAzerite)\n"]},"metadata":{},"sourceType":"module"}