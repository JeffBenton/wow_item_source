{"ast":null,"code":"var _jsxFileName = \"/Users/jeffreybenton/Documents/Coding Things/react/wow_item_source/client/src/components/Azerite/FilterAzerite.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchCards, fetchAzerite } from \"../../actions/itemActions\";\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\n\nclass FilterAzerite extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      sources: [\"Raid\", \"Dungeon\", \"PvP\"],\n      slots: [\"Head\", \"Chest\", \"Shoulder\"]\n    };\n\n    this.handleClassSelection = e => {\n      this.props.setClass(e.target.title);\n      this.props.fetchAzerite({\n        class: e.target.title,\n        sources: this.state.sources,\n        slots: this.state.slots\n      });\n    };\n\n    this.handleSourceSelection = e => {\n      const value = this.props.sources[e.target.id];\n      this.props.setSource(e.target.id, value);\n      this.buildArray();\n    };\n\n    this.handleSlotSelection = e => {\n      const value = this.props.slots[e.target.id];\n      this.props.setSlot(e.target.id, value);\n    };\n\n    this.buildArray = () => {\n      const sources = Object.keys(this.props.sources).filter();\n    };\n  }\n\n  render() {\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(DropdownButton, {\n      id: \"dropdown-class-button\",\n      title: this.props.char_class,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, ['Death Knight', 'Demon Hunter', 'Druid', 'Hunter', 'Mage', 'Monk', 'Paladin', 'Priest', 'Rogue', 'Shaman', 'Warlock', 'Warrior'].map(cls => React.createElement(\"div\", {\n      key: cls,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(Dropdown.Item, {\n      onClick: this.handleClassSelection,\n      title: cls,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, cls)))), React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, ['Raid', 'Dungeon', 'PvP'].map(source => React.createElement(\"div\", {\n      key: source,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(Form.Check, {\n      onChange: this.handleSourceSelection,\n      custom: true,\n      checked: this.props.sources[source],\n      label: source,\n      type: \"checkbox\",\n      id: source,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    })))), React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, ['Head', 'Shoulder', 'Chest'].map(slot => React.createElement(\"div\", {\n      key: slot,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(Form.Check, {\n      onChange: this.handleSlotSelection,\n      custom: true,\n      checked: this.props.slots[slot],\n      label: slot,\n      type: \"checkbox\",\n      id: slot,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    char_class: state.char_class,\n    sources: state.sources,\n    slots: state.slots\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchCards: path => dispatch(fetchCards(path)),\n    fetchAzerite: params => dispatch(fetchAzerite(params)),\n    setClass: char_class => dispatch({\n      type: \"SET_CLASS\",\n      char_class\n    }),\n    setSource: (source, value) => dispatch({\n      type: \"SET_SOURCE\",\n      source,\n      value\n    }),\n    setSlot: (slot, value) => dispatch({\n      type: \"SET_SLOT\",\n      slot,\n      value\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterAzerite);","map":{"version":3,"sources":["/Users/jeffreybenton/Documents/Coding Things/react/wow_item_source/client/src/components/Azerite/FilterAzerite.js"],"names":["React","Component","connect","fetchCards","fetchAzerite","Dropdown","DropdownButton","Form","Container","Row","FilterAzerite","state","sources","slots","handleClassSelection","e","props","setClass","target","title","class","handleSourceSelection","value","id","setSource","buildArray","handleSlotSelection","setSlot","Object","keys","filter","render","char_class","map","cls","source","slot","mapStateToProps","mapDispatchToProps","dispatch","path","params","type"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchCards, fetchAzerite } from \"../../actions/itemActions\";\n\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport DropdownButton from 'react-bootstrap/DropdownButton'\nimport Form from 'react-bootstrap/Form'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\n\n\nclass FilterAzerite extends Component {\n\n    state = {\n        sources: [\"Raid\", \"Dungeon\", \"PvP\"],\n        slots: [\"Head\", \"Chest\", \"Shoulder\"]\n    };\n\n    handleClassSelection = e => {\n        this.props.setClass(e.target.title);\n        this.props.fetchAzerite({ class: e.target.title, sources: this.state.sources, slots: this.state.slots })\n    };\n\n    handleSourceSelection = e => {\n        const value = this.props.sources[e.target.id];\n        this.props.setSource(e.target.id, value);\n        this.buildArray();\n    };\n\n    handleSlotSelection = e => {\n        const value = this.props.slots[e.target.id];\n        this.props.setSlot(e.target.id, value);\n    };\n\n    buildArray = () => {\n        const sources = Object.keys(this.props.sources).filter()\n    };\n\n    render() {\n        return (\n            <Container>\n                <Row>\n                    <DropdownButton id=\"dropdown-class-button\" title={this.props.char_class}>\n                        {['Death Knight', 'Demon Hunter', 'Druid', 'Hunter', 'Mage', 'Monk', 'Paladin', 'Priest', 'Rogue', 'Shaman', 'Warlock', 'Warrior'].map(cls => (\n                            <div key={cls}>\n                                <Dropdown.Item onClick={this.handleClassSelection} title={cls}>{cls}</Dropdown.Item>\n                            </div>\n                        ))}\n                    </DropdownButton>\n\n                    <Form>\n                        {['Raid', 'Dungeon', 'PvP'].map(source => (\n                            <div key={source}>\n                                <Form.Check\n                                    onChange={this.handleSourceSelection}\n                                    custom\n                                    checked={this.props.sources[source]}\n                                    label={source}\n                                    type=\"checkbox\"\n                                    id={source}\n                                />\n                            </div>\n                        ))}\n                    </Form>\n                    <Form>\n                        {['Head', 'Shoulder', 'Chest'].map(slot => (\n                            <div key={slot}>\n                                <Form.Check\n                                    onChange={this.handleSlotSelection}\n                                    custom\n                                    checked={this.props.slots[slot]}\n                                    label={slot}\n                                    type=\"checkbox\"\n                                    id={slot}\n                                />\n                            </div>\n                        ))}\n                    </Form>\n                </Row>\n            </Container>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        char_class: state.char_class,\n        sources: state.sources,\n        slots: state.slots\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchCards: path => dispatch(fetchCards(path)),\n        fetchAzerite: params => dispatch(fetchAzerite(params)),\n        setClass: char_class => dispatch({ type: \"SET_CLASS\", char_class }),\n        setSource: (source, value) => dispatch({ type: \"SET_SOURCE\", source, value }),\n        setSlot: (slot, value) => dispatch({ type: \"SET_SLOT\", slot, value})\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterAzerite)\n"]},"metadata":{},"sourceType":"module"}