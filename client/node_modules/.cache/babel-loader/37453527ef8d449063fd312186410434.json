{"ast":null,"code":"var _jsxFileName = \"/Users/jeffreybenton/Documents/Coding Things/react/wow_item_source/client/src/components/Azerite/FilterAzerite.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchCards, fetchAzerite } from \"../../actions/itemActions\";\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\n\nclass FilterAzerite extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      class: 'Select Class',\n      sources: {\n        raid: true,\n        dungeon: true,\n        pvp: true\n      },\n      slots: {\n        helm: true,\n        shoulder: true,\n        chest: true\n      }\n    };\n\n    this.handleClassSelection = e => {\n      this.setState({\n        class: e.target.title\n      });\n      this.props.fetchAzerite(this.state.class);\n    };\n\n    this.handleSourceSelection = e => {\n      const source = e.target.id.toLowerCase();\n      const sources = this.state.sources;\n      sources[source] = !this.state.sources[source];\n      this.setState({\n        sources\n      });\n    };\n\n    this.handleSlotSelection = e => {\n      const slot = e.target.id.toLowerCase();\n      const slots = this.state.slots;\n      slots[slot] = !this.state.slots[slot];\n      this.setState({\n        slots\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(DropdownButton, {\n      id: \"dropdown-class-button\",\n      title: this.state.class,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, ['Death Knight', 'Demon Hunter', 'Druid', 'Hunter', 'Mage', 'Monk', 'Paladin', 'Priest', 'Rogue', 'Shaman', 'Warlock', 'Warrior'].map(cls => React.createElement(\"div\", {\n      key: cls,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(Dropdown.Item, {\n      onClick: this.handleClassSelection,\n      title: cls,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, cls)))), React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, ['Raid', 'Dungeon', 'PvP'].map(source => React.createElement(\"div\", {\n      key: source,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Form.Check, {\n      onChange: this.handleSourceSelection,\n      custom: true,\n      checked: this.state.sources[source.toLowerCase()],\n      label: source,\n      type: \"checkbox\",\n      id: source,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    })))), React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, ['Helm', 'Shoulder', 'Chest'].map(slot => React.createElement(\"div\", {\n      key: slot,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(Form.Check, {\n      onChange: this.handleSlotSelection,\n      custom: true,\n      checked: this.state.slots[slot.toLowerCase()],\n      label: slot,\n      type: \"checkbox\",\n      id: slot,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchCards: path => dispatch(fetchCards(path)),\n    fetchAzerite: params => dispatch(fetchAzerite(params))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(FilterAzerite);","map":{"version":3,"sources":["/Users/jeffreybenton/Documents/Coding Things/react/wow_item_source/client/src/components/Azerite/FilterAzerite.js"],"names":["React","Component","connect","fetchCards","fetchAzerite","Dropdown","DropdownButton","Form","Container","Row","FilterAzerite","state","class","sources","raid","dungeon","pvp","slots","helm","shoulder","chest","handleClassSelection","e","setState","target","title","props","handleSourceSelection","source","id","toLowerCase","handleSlotSelection","slot","render","map","cls","mapDispatchToProps","dispatch","path","params"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchCards, fetchAzerite } from \"../../actions/itemActions\";\n\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport DropdownButton from 'react-bootstrap/DropdownButton'\nimport Form from 'react-bootstrap/Form'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\n\n\nclass FilterAzerite extends Component {\n\n    state = {\n        class: 'Select Class',\n        sources: {\n            raid: true,\n            dungeon: true,\n            pvp: true\n        },\n        slots: {\n            helm: true,\n            shoulder: true,\n            chest: true\n        }\n    };\n\n    handleClassSelection = e => {\n        this.setState({\n            class: e.target.title\n        });\n        this.props.fetchAzerite(this.state.class)\n    };\n\n    handleSourceSelection = e => {\n        const source = e.target.id.toLowerCase();\n        const sources = this.state.sources;\n        sources[source] = !this.state.sources[source];\n\n        this.setState({\n            sources\n        })\n    };\n\n    handleSlotSelection = e => {\n        const slot = e.target.id.toLowerCase();\n        const slots = this.state.slots;\n        slots[slot] = !this.state.slots[slot];\n\n        this.setState({\n            slots\n        })\n    };\n\n    render() {\n        return (\n            <Container>\n                <Row>\n                    <DropdownButton id=\"dropdown-class-button\" title={this.state.class}>\n                        {['Death Knight', 'Demon Hunter', 'Druid', 'Hunter', 'Mage', 'Monk', 'Paladin', 'Priest', 'Rogue', 'Shaman', 'Warlock', 'Warrior'].map(cls => (\n                            <div key={cls}>\n                                <Dropdown.Item onClick={this.handleClassSelection} title={cls}>{cls}</Dropdown.Item>\n                            </div>\n                        ))}\n                    </DropdownButton>\n\n                    <Form>\n                        {['Raid', 'Dungeon', 'PvP'].map(source => (\n                            <div key={source}>\n                                <Form.Check\n                                    onChange={this.handleSourceSelection}\n                                    custom\n                                    checked={this.state.sources[source.toLowerCase()]}\n                                    label={source}\n                                    type=\"checkbox\"\n                                    id={source}\n                                />\n                            </div>\n                        ))}\n                    </Form>\n                    <Form>\n                        {['Helm', 'Shoulder', 'Chest'].map(slot => (\n                            <div key={slot}>\n                                <Form.Check\n                                    onChange={this.handleSlotSelection}\n                                    custom\n                                    checked={this.state.slots[slot.toLowerCase()]}\n                                    label={slot}\n                                    type=\"checkbox\"\n                                    id={slot}\n                                />\n                            </div>\n                        ))}\n                    </Form>\n                </Row>\n            </Container>\n        )\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchCards: path => dispatch(fetchCards(path)),\n        fetchAzerite: params => dispatch(fetchAzerite(params))\n    }\n};\n\nexport default connect(null, mapDispatchToProps)(FilterAzerite)\n"]},"metadata":{},"sourceType":"module"}